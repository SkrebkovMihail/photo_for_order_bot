from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import asyncio
import re
import json
import os

# üîë –¢–í–û–ô –¢–û–ö–ï–ù –û–¢ BotFather
API_TOKEN = "8323635812:AAHJldl1LxNt86BMxPbMxStAHur_gecnKeI"

# üìå ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100...)
CHANNEL_ID = -1002945674765

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# üìÇ –±–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤: {–Ω–∞–∑–≤–∞–Ω–∏–µ -> file_id}
PRODUCTS_FILE = "products.json"
PRODUCTS = {}

# –ü–∞–º—è—Ç—å –¥–ª—è –≥–∞–ª–µ—Ä–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_GALLERIES = {}


# ======================
# –ó–∞–≥—Ä—É–∑–∫–∞ / —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã
# ======================
def save_products():
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(PRODUCTS, f, ensure_ascii=False, indent=2)


def load_products():
    global PRODUCTS
    if os.path.exists(PRODUCTS_FILE):
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            PRODUCTS = json.load(f)
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PRODUCTS)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã")


# ======================
# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª–µ
# ======================
@dp.channel_post(F.photo & F.caption)
async def update_products(message: types.Message):
    caption = message.caption.strip()
    file_id = message.photo[-1].file_id
    PRODUCTS[caption] = file_id
    save_products()
    print(f"–î–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–≤–∞—Ä: {caption}")


# ======================
# –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–∞
# ======================
def parse_order(text: str):
    pattern = r"\d+\)\s(.+?)\sx\s(\d+)\s-\s([\d.]+)\sEUR"
    return re.findall(pattern, text)


# ======================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞-–ª–∏—Å—Ç–∞–ª–∫–∞
# ======================
def get_kb(index: int, total: int):
    kb = []
    row = []

    if index > 0:
        row.append(InlineKeyboardButton(text="‚èÆ", callback_data=f"first:{index}"))
        row.append(InlineKeyboardButton(text="‚¨Ö", callback_data=f"prev:{index}"))

    if index < total - 1:
        row.append(InlineKeyboardButton(text="‚û°", callback_data=f"next:{index}"))
        row.append(InlineKeyboardButton(text="‚è≠", callback_data=f"last:{index}"))

    if row:
        kb.append(row)

    return InlineKeyboardMarkup(inline_keyboard=kb) if kb else None


# ======================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
# ======================
@dp.message()
async def handle_order(message: types.Message):
    items = parse_order(message.text)
    if not items:
        await message.answer("‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–∫–∞–∑")
        return

    gallery = []
    for name, qty, price in items:
        file_id = PRODUCTS.get(name)
        if file_id:
            caption = f"<b>{name}</b>\n–ö–æ–ª-–≤–æ: {qty}\n–¶–µ–Ω–∞: {price} EUR"
            gallery.append((file_id, caption))
        else:
            # ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
            fallback_id = PRODUCTS.get("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            caption = f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: {name}\n–ö–æ–ª-–≤–æ: {qty}\n–¶–µ–Ω–∞: {price} EUR"
            if fallback_id:
                gallery.append((fallback_id, caption))
            else:
                gallery.append((None, caption))

    if not gallery:
        await message.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    file_id, caption = gallery[0]
    if file_id:
        msg = await message.answer_photo(
            photo=file_id,
            caption=caption,
            reply_markup=get_kb(0, len(gallery))
        )
    else:
        msg = await message.answer(
            caption,
            reply_markup=get_kb(0, len(gallery))
        )

    # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∞–ª–µ—Ä–µ—é –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_GALLERIES[message.from_user.id] = {
        "gallery": gallery,
        "msg_id": msg.message_id,
        "chat_id": msg.chat.id
    }


# ======================
# –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ
# ======================
@dp.callback_query(F.data.startswith(("prev", "next", "first", "last")))
async def paginate(query: CallbackQuery):
    user_id = query.from_user.id
    user_gallery = USER_GALLERIES.get(user_id)

    if not user_gallery:
        await query.answer("‚ùå –ì–∞–ª–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    gallery = user_gallery["gallery"]
    msg_id = user_gallery["msg_id"]
    chat_id = user_gallery["chat_id"]

    action, index = query.data.split(":")
    index = int(index)

    if action == "prev":
        index -= 1
    elif action == "next":
        index += 1
    elif action == "first":
        index = 0
    elif action == "last":
        index = len(gallery) - 1

    file_id, caption = gallery[index]

    if file_id:  # ‚úÖ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        await bot.edit_message_media(
            chat_id=chat_id,
            message_id=msg_id,
            media=types.InputMediaPhoto(media=file_id, caption=caption),
            reply_markup=get_kb(index, len(gallery))
        )
    else:  # ‚ùå —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await bot.edit_message_caption(
            chat_id=chat_id,
            message_id=msg_id,
            caption=caption,
            reply_markup=get_kb(index, len(gallery))
        )

    await query.answer()


# ======================
# –ó–∞–ø—É—Å–∫
# ======================
async def main():
    load_products()   # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
